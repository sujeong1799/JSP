// function에 async 붙인건 비동기함수라는 뜻임.
//화면에서 등록한 댓글 내용을 컨트롤러로 전송 -> DB 저장
async function postCommentToServer(cmtData){
	try{
		/*url뒤에 config 붙여서 보내줄거야*/
		const url = "/cmt/post";
		const config={
			method:'post',
			headers:{
				'content-Type':'application/json; charset=utf-8'
			},
			body: JSON.stringify(cmtData)
		};
		
		// 응답 받고자 하는 데이터 두개담아서 보내줄게
		const resp = await fetch(url, config);
		const result = await resp.text(); // isOK 컨트롤러에 보내는 결과 잘됐으면 1 안됐으면 0
		return result;
	}catch(error){
		console.log(error);
	}
	
}

// 미리 보낼 데이터를 만들어서 함수로 전달 cmtData
document.getElementById('cmtAddBtn').addEventListener('click', ()=>{
	const cmtText = document.getElementById('cmtText').value; // 댓글 내용 가져오기
	console.log(cmtText);
	if(cmtText == null || cmtText == ""){  // 댓글 내용이 null 이거나 빈공간이면 alert띄우고 false리턴
		alert('댓글을 입력해주세요');
		return false;
	}else{
		let cmtData = { // 댓글 내용이 있으면~ bno는 bnoVal(detail.jsp에서 가져온 값)
			bno : bnoVal,
			writer : document.getElementById('cmtWriter').value, //writer == ${ses.id}가져오기 
			content : cmtText // 위에서 가져온 댓글 내용
		};
		postCommentToServer(cmtData).then(result => { // cmtData(글번호,작성자,댓글내용 보낼거야)
			if(result > 0){ // result가 0보다 크면 등록 성공
				alert('댓글 등록 성공!!');
				// 등록 후 cmtText에 남아있는거 날리기
				document.getElementById('cmtText').value="";
			}
			// 댓글 표시
			
		})
	}
})

// 댓글 가져오기
//컨트롤러에 가서 bno를 주고 bno에 해당하는 댓글 리스트 달라고 요청
async function getCommentListFromServer(bno){
	try{
		
	// 데이터가 controller로 이동한 후 컨트롤러 처리를 하고 응답데이터를 가져와서 resp에 저장한다.
	const resp = await fetch('/cmt/list/'+bno); //  cmt/list/1
	const cmtList = await resp.json(); // 댓글 객체가 리턴된다.
	return cmtList;
	
	}catch(error){
		console.log(error);
	}
}

// 임시호출.
// result == cmtList 이름을 뭘로 받던지 상관없음.
// 통신 완료 후 가져온 리스트를 콘솔에 찍어본 작업

getCommentListFromServer(bnoVal).then(result=>{ // 아까는 바로 뿌릴꺼라서 bnoVal로 받았지만 호출해서 하는거면 bno로 받아
	console.log(result);
	if(result.length > 0){
		spreadCommentList(result);	
	}else{
		let div = document.getElementById('accordionFlushExample');
		div.innerText = "comment가 없습니다.";
	}
})

function spreadCommentList(result){ // 여기 들어가는건 댓글 List
	console.log(result);
	// 댓글이 여러개 있을경우 출력하는걸 반복해야한다. 전체 div는 그대로 있고 나머지 div만 반복해야함.
	let div = document.getElementById('accordionFlushExample');// 전체는 가져왔으니 그 밑에 부분만 반복..
	div.innerHTML =""; // 밑에 div값을 날리는 작업 댓글이 여러개면 여러번 반복해야함.
	for(let i=0; i<result.length; i++){
		let html = `<div class="accordion-item">`;
		html += `<h2 class="accordion-header" id="flush-heading${i}">`; // one은 지우고 ${i}를 추가
		html += `<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"`;
		html += `data-bs-target="#flush-collapse${i}"`;
		html += `aria-expanded="false" aria-controls="flush-collapse${i}">`;
		html += `${result[i].cno}, ${result[i].writer}</button></h2>`; // cno, writer 부분도 바꿔준다.
		html += `<div id="flush-collapse${i}" class="accordion-collapse collapse"`;
		html += `aria-labelledby="flush-heading${i}" data-bs-parent="#accordionFlushExample">`;
		html += `<div class="accordion-body">`;
		html += `<button type="button" data-cno="${result[i].cno}" data-writer="${result[i].writer}" class="btn btn-sm btn-warning cmtModBtn">%</button>`; // 수정해줄 버튼을 만들어줄거임. 부트스트랩에서 맘에 드는거 가져오삼
		html += `<button type="button" data-cno="${result[i].cno}" class="btn btn-sm btn-danger cmtDelBtn">X</button>`; // 삭제할 버튼 만들어줄겨
		html += `<input type="text" class="form-control" id="cmtText1" value="${result[i].content}">`;	// 댓글 담을 공간 부트스트랩에서 가져옴ㅋ
		html += `${result[i].reg_date}`;
		html += `</div></div></div>`;
		div.innerHTML += html; // 누적해서 담기
	}
	
	// 예시
					
					
					
			
			


				
				
				
				
	
}
