package controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.mysql.cj.xdevapi.JsonParser;

import domain.CommentVO;
import service.CommentService;
import service.CommentServiceImpl;


@WebServlet("/cmt/*")
public class CommentController extends HttpServlet {
	private static final long serialVersionUID = 1L;
       private static final Logger log = LoggerFactory.getLogger(CommentController.class);
       // 목적지 주소로 보내는 destPage 쓰지않음.
       // 비동기 통신으로 요청이 온 곳으로 돌려보냄
       private int isOk; // 잘되는지 한번 보려고
       private CommentService csv;
       

    public CommentController() {
        csv = new CommentServiceImpl();

    }


	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	      request.setCharacterEncoding("utf-8");
	      response.setCharacterEncoding("utf-8"); 
	      // contentType은 사용하지 않음.
//	      response.setContentType("text/html; charset=utf-8"); 
	      
	      
	      // 전에는 brd/list, brd/register?bno=1 로 달고 왔는데 댓글은 다름
	      // cmt/post/1, cmt/modify/1 이런식으로 함 왜 이럴까? < 이 방식은 REST API방식임 
	      String uri = request.getRequestURI();
	      log.info(uri);
	      
	      // 앞에있는 기능
	      String pathUri = uri.substring("/cmt/".length()); // length만큼 가져온다.  여기에 담기는 것 modify/1 post가 아무것도 안달고 온 케이스라면 post만 남음
	      // pathUri 결과문 modify/1 , post
	      
	      String path = pathUri;
	      
	      // 뒤에있는 숫자
	      String pathVar = ""; 
	      
	      if(pathUri.contains("/")) { // "/" < 이게 있다면
	    	// modify/1 이 오면 m부터 /앞까지 추출ㅋ
	    	path = pathUri.substring(0, pathUri.lastIndexOf("/"));  
	    	// 뒤에 있는 숫자만 추출
	    	pathVar = pathUri.substring(pathUri.lastIndexOf("/")+1);
	      }
	      
	      
	      log.info(path);
	      log.info(pathVar);
	      
	      switch(path) {
	      case "post":
	    	  try {
				// js에서 보낸 데이터를 StringBuffer로 읽어들이는 작업
	    		  StringBuffer sb = new StringBuffer();
	    		  String line = "";
	    		  BufferedReader br = request.getReader(); // 댓글 객체를 들고와
	    		  while((line = br.readLine()) != null ) { // line에 값이 남아 있다면~  // line이 null이라면 더이상 읽을게 없다.
	    			  sb.append(line); // 버퍼에 추가
	    		  }
	    		  log.info(">>> sb : " + sb.toString()); // toString으로 찍어줘야한다.
	    		  
	    		  // 객체로 생성
	    		  // JSON <-> text
	    		  JSONParser parser = new JSONParser();
	    		  JSONObject jsonObj = (JSONObject) parser.parse(sb.toString());
	    		  
	    		  int bno = Integer.parseInt(jsonObj.get("bno").toString());
	    		  String writer = jsonObj.get("writer").toString();
	    		  String content = jsonObj.get("content").toString();
	    		  CommentVO cvo = new CommentVO(bno, writer, content);
	    		  isOk = csv.post(cvo);
	    		  log.info(">>> post : "+ (isOk > 0 ? "성공":"실패"));
	    		  
	    		  // 결과 전송
	    		  PrintWriter out = response.getWriter(); // 응답 객체로 보낼겨
	    		  out.print(isOk); // 가는경우 . . . .?
	    		  
	    		  
			} catch (Exception e) {
				// TODO: handle exception
			}
	    	  break;
	    	  
	      case "list":
	    	  
	    	  try {
	    		  int bno = Integer.parseInt(pathVar);
	    		  log.info("bno >>"+bno);
	    		  // bno 달고 해당하는 리스트 가져오기
	    		  List<CommentVO> list = csv.getList(bno);
	    		  log.info(">>> Comment Lis > DB ok");
	    		  
	    		  // json 형태로 변환해서 printWriter 
	    		  // 배열로 여러개 가져와 갯수는 list.size만큼
	    		  JSONObject[] jsonObjArr = new JSONObject[list.size()];
	    		  JSONArray jsonObjList = new JSONArray();
	    		  for(int i=0; i<list.size(); i++) {
	    			  jsonObjArr[i] = new JSONObject(); // key : value 형태로 저장할수있는 객체가 만들어짐
	    			  jsonObjArr[i].put("cno", list.get(i).getCno());
	    			  jsonObjArr[i].put("bno", list.get(i).getBno());
	    			  jsonObjArr[i].put("writer", list.get(i).getWriter());
	    			  jsonObjArr[i].put("content", list.get(i).getContent());
	    			  jsonObjArr[i].put("reg_date", list.get(i).getReg_date());
	    			  
	    			  jsonObjList.add(jsonObjArr[i]);
	    			  
	    		  }
	    		  log.info(">>> jsonObjList > "+jsonObjList);
	    		  
	    		  // jsonData란 이름으로 toString형태보냄
	    		  String jsonData = jsonObjList.toJSONString();
	    		  log.info(">>> jsonData > "+jsonData);
	    		  
	    		  PrintWriter out = response.getWriter();
	    		  out.print(jsonData);
				
			} catch (Exception e) {
				log.info(">>> comment list > error");
				e.printStackTrace();
			}
	    	  break;
	    	  
	      case "remove":
	    	  try {				
	    		  int cno = Integer.parseInt(request.getParameter("cnoVal")); // 쿼리스트링 방식
	    		  log.info(">>> cno > "+cno);
	    		  
	    		  isOk = csv.remove(cno);
	    		  log.info("remove > "+(isOk > 0 ? "성공":"실패"));
	    		  PrintWriter out = response.getWriter();
	    		  out.print(isOk);
			} catch (Exception e) {
				log.info("remove error");
				e.printStackTrace();
			}
	    	  break;
	    	  
	      case "modify":
	    	  try {
	    			// js에서 보낸 데이터를 StringBuffer로 읽어들이는 작업
	    		  StringBuffer sb = new StringBuffer();
	    		  String line = "";
	    		  BufferedReader br = request.getReader(); // 댓글 객체를 들고와
	    		  while((line = br.readLine()) != null ) { // line에 값이 남아 있다면~  // line이 null이라면 더이상 읽을게 없다.
	    			  sb.append(line); // 버퍼에 추가
	    		  }
	    		  log.info(">>> sb : " + sb.toString()); // toString으로 찍어줘야한다.
	    		  
	    		  // 객체로 생성
	    		  // JSON <-> text
	    		  JSONParser parser = new JSONParser();
	    		  JSONObject jsonObj = (JSONObject) parser.parse(sb.toString());
	    		  log.info("jsonObj > "+jsonObj);
	    		  
	    		  int cno = Integer.parseInt(request.getParameter("cnoVal"));
	    		  String writer = jsonObj.get("writer").toString();
	    		  String content = jsonObj.get("content").toString();
	    		  CommentVO cvo = new CommentVO(cno, writer, content);
	    		  isOk = csv.edit(cvo);
	    		  log.info(">>> edit : "+ (isOk > 0 ? "성공":"실패"));
	    		  
	    		  // 결과 전송
	    		  PrintWriter out = response.getWriter(); // 응답 객체로 보낼겨
	    		  out.print(isOk); // 가는경우 . . . .?
	    		  
			} catch (Exception e) {
				log.info("modify error");
				e.printStackTrace();
			}
	    	  break;
	    	  
	      }
	}


	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		service(request, response);
	}


	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		service(request, response);
	}

}
