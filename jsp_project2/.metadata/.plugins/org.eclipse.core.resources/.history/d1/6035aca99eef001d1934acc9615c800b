package controller;

import java.io.IOException;

import javax.security.auth.message.callback.PrivateKeyCallback.Request;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import service.ProductService;
import service.Service;



public class ProductController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	// 상품등록, 상품리스트, 상품상세, 상품수정, 상품삭제에 대한 분기처리를 해야한다.
	// ~ 흐름 ~
	// 컨트롤러는 서비스를 호출해서 값을 처리. (메서드 호출)
	// 서비스는 DAO를 호출해서 처리
	// DAO는 DBconnection을 연결해서 처리
	
	//멤버변수
	private Service svc;

	//생성자
    public ProductController() {
    	svc = new ProductService();
    	
    }


    // 주 작업 영역
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// get/post 모든 처리는 service에서 처리함
		// post방식으로 데이터 처리를 할 때 한글이 다 깨지는 것을 방지하려면 인코딩 해줘야한다.
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		// 보내는 response 객체 세팅
		response.setContentType("text/html; charset=UTF-8");
		
		// 무슨주소를 달고 오는지를 알아야함 uri는 요청에 대한 모든 객체를 담고 있다.
		// request에서 오는 requestURI를 가져와서 uri에 담아줄거임 
		String uri = request.getRequestURI(); // 요청경로(원하는 서비스를 달고옴) 컨트롤러주소/요청서비스 < 이렇게 달고오는데 우리는 요청서비스만 달고올거임
		System.out.println("요청 uri >> "+uri);
		String context = request.getContextPath(); // 현재 요청하는 프로젝트의 명
		System.out.println("context >> "+ context);
		
		//객체를 보내야하는 목적지 주소
		String destPage ="";
		
		// 오는 요청에 대한 처리
		switch(uri) {
		case "/register.pd":
			// /폴더명/jsp파일명.jsp  로 경로설정해준다. 지금은 폴더가 없으니까 그냥 가져온다.
			destPage = "/register.jsp";
			break;
			
		//받는거
		case "insert.pd":
			//DB연결, 등록처리
			break;
			
		}
		
		
		
		// 웹의 목적지 주소로 연결해주는 객체 (보내는 객체처리) // 없으면 연결이 안됨
		// destPage로 이동시 응답 request객체를 싣고 가야 함 
		RequestDispatcher rdp = request.getRequestDispatcher(destPage);
		// rdp에 요청할거여
		rdp.forward(request, response);
		
	}


	// get 방식으로 오는 값을 체킹하는 부분
	// service를 호출해서 처리할거여
	// service로 처리하면 따로 안받아도 됨 좀 쉽게하기 위해서 서비스로 보내버린다.
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);		
	}


	// post 방식으로 오는 값을 체킹하는 부분
	// 서비스를 호출해서 처리할거임...
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
