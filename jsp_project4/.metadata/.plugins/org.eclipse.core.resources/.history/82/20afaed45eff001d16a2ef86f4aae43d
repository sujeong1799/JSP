package controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.PagingVO;
import handler.PagingHandler;
import service.BoardService;
import service.BoardServiceImpl;

@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	private static final Logger log = LoggerFactory.getLogger(BoardController.class);
	private RequestDispatcher rdp; 
	private String destPage; 
	private int isOk;
	private BoardService bsv;
	// 파일 경로를 저장할 변수
	private String savePath;
	private final String UTF8 = "utf-8";
	
	public BoardController() {
		bsv = new BoardServiceImpl();
	}

	protected void service(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");
		response.setContentType("text/html; charset=UTF-8");

		String uri = request.getRequestURI();
		log.info(">>> uri  " + uri);
		String path = uri.substring(uri.lastIndexOf("/") + 1);
		log.info(">>path: " + path);

		switch (path) {

		case "insert":
			try {
				/*
				 * String title = request.getParameter("title"); String writer =
				 * request.getParameter("writer"); String content =
				 * request.getParameter("content");
				 * 
				 * BoardVO bvo = new BoardVO(title, writer, content); isOk = bsv.insert(bvo);
				 * log.info(">>> 글 등록 > " + (isOk > 0 ? "성공" : "실패"));
				 */

			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "page";
			break;

		case "list":
			try {
				List<BoardVO> list = bsv.list();
				request.setAttribute("list", list);
				log.info("list 나오나요? > "+list);
				log.info(">>> list 출력 완료");
			} catch (Exception e) {
			}
			destPage = "/board/list.jsp";
			break;
			
		case "page":
			try {
				int pageNo = 1;
				int qty = 10;
				
				String type = "";
				String keyword = "";
				
				if(request.getParameter("type") != null) {
					type = request.getParameter("type");
					keyword = request.getParameter("keyword");
					log.info(">>>type >"+type+">>>keyword > "+keyword);
				}

				if(request.getParameter("pageNo") != null) {
					pageNo = Integer.parseInt(request.getParameter("pageNo"));
					qty = Integer.parseInt(request.getParameter("qty"));
				}
				
				PagingVO pgvo = new PagingVO(pageNo, qty);
				pgvo.setType(type);
				pgvo.setKeyword(keyword);
				log.info(">>> pgvo >"+pgvo);
				
				int totCount = bsv.total(pgvo);
				log.info("전체 페이지 개수 > "+totCount);
				List<BoardVO> list = bsv.PageList(pgvo);
				log.info(">>> list : "+list.size());
				PagingHandler ph = new PagingHandler(pgvo, totCount);
				log.info(">>>> start "+ ph.getStartPage());
				log.info(">>>> end "+ ph.getEndPage());
				request.setAttribute("pgh", ph);
				request.setAttribute("list", list);
				log.info("pageList 성공");
				destPage ="/board/list.jsp";
			} catch (Exception e) {
				e.printStackTrace();
				}
			break;

		case "detail":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				log.info(" detail bno 넘버능?"+bno);
				BoardVO bvo = bsv.detail(bno);
				log.info("detail 담아오나요 ? >" +bvo);
				request.setAttribute("bvo", bvo);
				log.info(">>> detail 출력 완료");
			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "/board/detail.jsp";
			break;

		case "editPage":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				BoardVO bvo = bsv.detail1(bno);
				request.setAttribute("bvo", bvo);
				log.info(">>> detail 출력 완료");
			} catch (Exception e) {
				e.printStackTrace();
			}

			destPage = "/board/edit.jsp";
			break;

		case "edit":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				String title = request.getParameter("title");
				String content = request.getParameter("content");
				BoardVO bvo = new BoardVO(bno, title, content);
				isOk = bsv.edit(bvo);
				log.info(">>> edit > " + (isOk > 0 ? "성공" : "실패"));

				if (isOk > 0) {
					request.setAttribute("bvo", bvo);
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "/brd/detail";
			break;

		case "remove":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				isOk = bsv.remove(bno);
				log.info(">>> 글 삭제 >" + (isOk > 0 ? "성공" : "실패"));
			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "/brd/list";
			break;
		}

		rdp = request.getRequestDispatcher(destPage);
		rdp.forward(request, response);
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		service(request, response);
	}

}
